{"version":3,"sources":["webpack://testwebpack/./src/public/index.js","webpack://testwebpack/./src/public/js/main.js","webpack://testwebpack/./src/public/js/cartComp.js","webpack://testwebpack/./src/public/js/productComp.js","webpack://testwebpack/./src/public/js/errorComp.js","webpack://testwebpack/./src/public/js/searchComp.js"],"names":["Vue","el","components","cart","cartItem","props","template","data","cartItems","showCart","methods","addProduct","product","prod","find","this","id_product","$parent","putJson","quantity","product_name","Object","assign","postJson","then","result","push","remove","item","removeJson","splice","indexOf","mounted","getJson","contents","products","cartAPI","$root","$refs","filtered","filter","value","regexp","RegExp","test","error","search","userSearch","url","fetch","json","method","headers","body","JSON","stringify","console","log"],"mappings":"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","file":"js/script.js","sourcesContent":["import appMain from './js/main'\r\nimport './css/style.css'\r\n\r\nconst app = new Vue(appMain);","import cart from './cartComp'\r\nimport products from './productComp'\r\nimport search from './searchComp'\r\nimport error from './errorComp'\r\n\r\nconst app = {\r\n    el: '#app',\r\n    components: {\r\n        cart,\r\n        products,\r\n        error,\r\n        search,\r\n    },\r\n    methods: {\r\n        getJson(url) {\r\n            return fetch(url)\r\n                .then(result => result.json())\r\n                .catch(error => {\r\n                    this.$refs.error.error = error;\r\n                });\r\n        },\r\n        postJson(url, data) {\r\n            return fetch(url, {\r\n                method: 'POST',\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(data)\r\n            }).then(result => result.json())\r\n                .catch(error => {\r\n                    this.$refs.error.error = error;\r\n                });\r\n        },\r\n        putJson(url, data) {\r\n            return fetch(url, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(data)\r\n            }).then(result => result.json())\r\n                .catch(error => {\r\n                    this.$refs.error.error = error;\r\n                });\r\n        },\r\n        removeJson(url, data) {\r\n            return fetch(url, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(data)\r\n            }).then(result => result.json())\r\n                .catch(error => {\r\n                    this.$refs.error.error = error;\r\n                });\r\n        },\r\n    },\r\n    mounted() {\r\n        console.log(this);\r\n    }\r\n};\r\n\r\nexport default app;\r\n","const cartItem = {\r\n    props: ['cartItem'],\r\n    template: `\r\n                <div class=\"cart-item\">\r\n                    <div class=\"product-bio\">\r\n                        <img :src=\"cartItem.img_cart\" alt=\"Some img\">\r\n                        <div class=\"product-desc\">\r\n                            <p class=\"product-title\">{{cartItem.product_name}}</p>\r\n                            <p class=\"product-quantity\">Количество: {{cartItem.quantity}}</p>\r\n                            <p class=\"product-single-price\">{{cartItem.price}} ₽ за единицу</p>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"right-block\">\r\n                        <p class=\"product-price\">{{cartItem.price * cartItem.quantity}} ₽</p>\r\n                        <button class=\"del-btn\" @click=\"$emit('remove', cartItem)\">X</button>\r\n                    </div>\r\n                </div>`\r\n};\r\n\r\nconst cart = {\r\n    components: { cartItem },\r\n    data(){\r\n        return {\r\n            cartItems: [],\r\n            showCart: false,\r\n        }\r\n    },\r\n    methods: {\r\n        addProduct(product) {\r\n            let find = this.cartItems.find(el => el.id_product === product.id_product);\r\n            if (find){\r\n                this.$parent.putJson(`/api/cart/${find.id_product}`, {quantity: 1, product_name: `${product.product_name}`});\r\n                find.quantity++;\r\n            } else {\r\n                let prod = Object.assign({quantity: 1}, product);\r\n                this.$parent.postJson(`/api/cart`, prod)\r\n                    .then(data => {\r\n                        if (data.result === 1){\r\n                            this.cartItems.push(prod);\r\n                        }\r\n                    });\r\n            }\r\n        },\r\n        remove(item){\r\n            if (item.quantity > 1){\r\n                this.$parent.putJson(`/api/cart/${item.id_product}`, {quantity: -1, product_name: `${item.product_name}`});\r\n                item.quantity--;\r\n            } else {\r\n                this.$parent.removeJson(`/api/cart/${item.id_product}`, {product_name: `${item.product_name}`});\r\n                this.cartItems.splice(this.cartItems.indexOf(item), 1);\r\n            }\r\n        },\r\n    },\r\n    mounted(){\r\n        this.$parent.getJson('/api/cart')\r\n            .then(data => {\r\n                for (let el of data.contents){\r\n                    this.cartItems.push(el);\r\n                }\r\n            });\r\n    },\r\n    template: `\r\n                <div>\r\n                    <button class=\"btn-cart\" type=\"button\" @click=\"showCart = !showCart\">Корзина</button>\r\n                    <div class=\"cart-block\" v-show=\"showCart\">\r\n                        <p v-if=\"!cartItems.length\">Корзина пуста</p>\r\n                        <cart-item class=\"cart-item\"\r\n                        v-for=\"item of cartItems\"\r\n                        :key=\"item.id_product\"\r\n                        :cart-item=\"item\"\r\n                        @remove=\"remove\">\r\n                        </cart-item>\r\n                    </div>\r\n                </div>`\r\n};\r\n\r\nexport default cart;","const product = {\r\n    props: ['product'],\r\n    data() {\r\n        return{\r\n            cartAPI: this.$root.$refs.cart,\r\n        };\r\n    },\r\n    template: `\r\n        <div class=\"product-item\">\r\n            <img :src=\"product.img_catalog\" alt=\"Some img\">\r\n            <div class=\"desk\">\r\n                <h3>{{product.product_name}}</h3>\r\n                <p>{{product.price}} ₽</p>\r\n                <button class=\"buy-btn\" @click=\"cartAPI.addProduct(product)\">Купить</button>\r\n            </div>\r\n        </div>\r\n    `\r\n};\r\n\r\nconst products = {\r\n    components: { product },\r\n    data(){\r\n        return {\r\n            products: [],\r\n            filtered: [],\r\n        }\r\n    },\r\n    methods: {\r\n        filter(value){\r\n            let regexp = new RegExp(value, 'i');\r\n            this.filtered = this.products.filter(el => regexp.test(el.product_name));\r\n        },\r\n    },\r\n    mounted(){\r\n        this.$parent.getJson('/api/products')\r\n            .then(data => {\r\n                for (let el of data){\r\n                    this.products.push(el);\r\n                    this.filtered.push(el);\r\n                }\r\n            });\r\n    },\r\n    template: `\r\n        <div class=\"products\">\r\n            <product v-for=\"item of filtered\" :key=\"item.id_product\" :product=\"item\"></product>\r\n        </div>\r\n    `\r\n};\r\n\r\nexport default products;","const error = {\r\n   data() {\r\n       return {\r\n           error: '',\r\n       }\r\n   },\r\n    template: `\r\n        <div class=\"error\">{{ error }}</div>\r\n    `\r\n};\r\n\r\nexport default error;\r\n","const search = {\r\n   data(){\r\n       return {\r\n           userSearch: '',\r\n       }\r\n   },\r\n    template: `\r\n    <div>\r\n            <form action=\"#\" class=\"search-form\" @submit.prevent=\"$parent.$refs.products.filter(userSearch)\">\r\n                    <input type=\"text\" class=\"search-field\" v-model=\"userSearch\">\r\n                    <button class=\"btn-search\" type=\"submit\">\r\n                    <i class=\"fa fa-search fa-lg\" aria-hidden=\"true\"></i>\r\n                    </button>\r\n            </form>\r\n    </div>\r\n`\r\n};\r\n\r\nexport default search;"],"sourceRoot":""}